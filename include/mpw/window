#pragma once
#ifndef MPW_WINDOW
#define MPW_WINDOW

#ifndef _WIN32
#include <ds/unordered_map>
#endif
#include <ds/callable>
#include "common"
#include "enums"
#include "display"
#include "event"
#include "window"

namespace mw {

struct create_window_failure : public ds::exception
{
	char const *
	what() const noexcept override
	{
		return "create window failure";
	}
};

struct create_context_failure : public ds::exception
{
	char const *
	what() const noexcept override
	{
		return "create context failure";
	}
};

struct invalid_window : public ds::exception
{
	char const *
	what() const noexcept override
	{
		return "invalid window";
	}
};


class Window
{
	Display    * _display    = nullptr;
	ds::string<> _title;
	int          _x          = 0;
	int          _y          = 0;
	int          _width      = 0;
	int          _height     = 0;
	bool         _destroying = false;
	bool         _cursor_vis = true;
	bool         _win_vis    = false;
	bool         _modif      = false;
	window_style _style      = ws_normal;
  #ifdef _WIN32
	using LRESULT_   = mw::_win::LRESULT_;
	using HINSTANCE_ = mw::_win::HINSTANCE_;
	using HWND_      = mw::_win::HWND_;
	using HDC_       = mw::_win::HDC_;
	using HGLRC_     = mw::_win::HGLRC_;
	using UINT_      = mw::_win::UINT_;
	using WPARAM_    = mw::_win::WPARAM_;
	using LPARAM_    = mw::_win::LPARAM_;
	using DWORD_     = mw::_win::DWORD_;
	HINSTANCE_ _winhinst  = NULL;
	HWND_      _winwindow = NULL;
	HDC_       _windevctx = NULL;
	HGLRC_     _winglctx  = NULL;
	DWORD_     _winstyle  = 0;
  #else
	static constexpr ::Window _null_xwindow = {};
	::Window           _xwindow    = _null_xwindow;
	_glx::GLXContext   _xcontext   = nullptr;
	bool               _raised     = false;
  #endif

  #ifdef _WIN32
	static LRESULT_ __stdcall 
	_win_proc(HWND_ hwnd, UINT_ umsg, WPARAM_ wparam, LPARAM_ lparam)
	{
		using namespace mw::_win;
		auto * window = reinterpret_cast<Window *>(GetWindowLongPtrA(hwnd, GWLP_USERDATA_));
		if(window != nullptr)
		{
			switch(umsg)
			{
				case WM_DESTROY_:
				{
					if(!window->_destroying)
						window->destroy();
					return 0;
				}
				case WM_SIZE_:
				{
					switch(wparam) 
					{
						case SIZE_MAXHIDE_:
						case SIZE_MINIMIZED_: 
							break;
						case SIZE_MAXIMIZED_:
						case SIZE_MAXSHOW_:
						case SIZE_RESTORED_:
						default:
						{
							int width  = _loword<short>(DWORD_(lparam));
							int height = _hiword<short>(DWORD_(lparam));
							window->_on_size(width, height);
							return 0;
						}
					}
					break;
				}
				case WM_MOVE_:
				{
					int x_ = _loword<short>(DWORD_(lparam));
					int y_ = _hiword<short>(DWORD_(lparam));
					window->_on_move(x_, y_);
					return 0;
				}
				case WM_LBUTTONDOWN_:
				case WM_LBUTTONUP_:
				{
					int x_ = _loword<short>(DWORD_(lparam));
					int y_ = _hiword<short>(DWORD_(lparam));
					bool   down_ = umsg == WM_LBUTTONDOWN_;
					window->_on_mouse_button(x_, y_, mb_left, down_);
					return 0;
				}
				case WM_RBUTTONDOWN_:
				case WM_RBUTTONUP_:
				{
					int  x_    = _loword<short>(DWORD_(lparam));
					int  y_    = _hiword<short>(DWORD_(lparam));
					bool down_ = umsg == WM_RBUTTONDOWN_;
					window->_on_mouse_button(x_, y_, mb_right, down_);
					return 0;
				}
				case WM_MBUTTONDOWN_:
				case WM_MBUTTONUP_:
				{
					int  x_    = _loword<short>(DWORD_(lparam));
					int  y_    = _hiword<short>(DWORD_(lparam));
					bool down_ = umsg == WM_MBUTTONDOWN_;
					window->_on_mouse_button(x_, y_, mb_middle, down_);
					return 0;
				}
				case WM_XBUTTONDOWN_:
				case WM_XBUTTONUP_:
				{
					int   x_    = _loword<short>(DWORD_(lparam));
					int   y_    = _hiword<short>(DWORD_(lparam));
					bool  down_ = umsg == WM_XBUTTONDOWN_;
					WORD_ xn_   = _hiword<WORD_>(DWORD_(wparam));
					switch(xn_)
					{
						case 1:  window->_on_mouse_button(x_, y_, mb_extra1, down_); break;
						case 2:  window->_on_mouse_button(x_, y_, mb_extra2, down_); break;
						default: window->_on_mouse_button(x_, y_, mb_other,  down_); break;
					}
					return 0;
				}
				case WM_MOUSEMOVE_:
				{
					POINT_ point { _loword<short>(DWORD_(lparam)), _hiword<short>(DWORD_(lparam)) };
					window->_on_mouse_move(point.x, point.y);
					return 0;
				}
				case WM_MOUSEWHEEL_:
				case WM_MOUSEHWHEEL_:
				{
					bool   vertical_ = umsg == WM_MOUSEWHEEL_;
					int    delta_    = _hiword<short>(DWORD_(wparam));
					POINT_ point_    = { _loword<short>(DWORD_(lparam)), _hiword<short>(DWORD_(lparam)) };
					ScreenToClient(hwnd, &point_);
					window->_on_mouse_wheel(point_.x, point_.y, delta_, vertical_);
					return 0;
				}
				case WM_KEYDOWN_:
				case WM_KEYUP_:
				{
					UINT_ scancode_ = (lparam & 0x00ff0000) >> 16;
					int   extended_ = (lparam & 0x01000000) != 0;
					bool  down_ = umsg == WM_KEYDOWN_;
					key   key_  = key_other;
					switch(wparam)
					{
						case VK_CONTROL_:
							key_ = _::_map_key(DWORD_(extended_ ? VK_RCONTROL_ : VK_LCONTROL_));
							break;
						case VK_SHIFT_:
							key_ = _::_map_key(DWORD_(MapVirtualKeyA(scancode_, MAPVK_VSC_TO_VK_EX_)));
							break;
						default:
							key_ = _::_map_key(DWORD_(wparam), DWORD_(lparam));
							break;
					}
					window->_on_key(key_, down_);
					return 0;
				}
				case WM_SYSKEYDOWN_:
				case WM_SYSKEYUP_:
				{
					int  extended_ = (lparam & 0x01000000) != 0;
					bool down_ = umsg == WM_SYSKEYDOWN_;
					key  key_  = key_other;
					switch(wparam)
					{
						case VK_MENU_:
							key_ = _::_map_key(DWORD_(extended_ ? VK_RMENU_ : VK_LMENU_));
							break;
						case VK_LWIN_:
						case VK_RWIN_:
							key_ = _::_map_key(DWORD_(wparam));
							break;
						default:
							return DefWindowProcA(hwnd, umsg, wparam, lparam);
					}
					window->_on_key(key_, down_);
					return DefWindowProcA(hwnd, umsg, wparam, lparam);
				}
			}
		}
		return DefWindowProcA(hwnd, umsg, wparam, lparam);
	};

  #else
	static ds::unordered_map<32,::Window,Window *> _map;
	
	bool
	_is_destroying() noexcept
	{
		return _destroying;
	}
	
	void
	_handle_xevent(::XEvent & xevent_) noexcept 
	{
		switch(xevent_.type)
		{
			case DestroyNotify:
			case ClientMessage:
			{
				if(!_destroying)
					this->destroy();
				break;
			}
			case ConfigureNotify:
			{
				int x_ = xevent_.xconfigure.x;
				int y_ = xevent_.xconfigure.y;
				int width_  = xevent_.xconfigure.width;
				int height_ = xevent_.xconfigure.height;
				if(width_ != _width || height_ != _height)
					this->_on_size(width_, height_);
				if(x_ != _x || y_ != _y)
					this->_on_move(x_, y_);
				break;
			}
			case ButtonPress:
			case ButtonRelease:
			{
				int  x_  = xevent_.xbutton.x;
				int  y_  = xevent_.xbutton.y;
				switch(xevent_.xbutton.button)
				{
					case Button1: this->_on_mouse_button(x_, y_, mb_left,   xevent_.type == ButtonPress); break;
					case Button2: this->_on_mouse_button(x_, y_, mb_middle, xevent_.type == ButtonPress); break;
					case Button3: this->_on_mouse_button(x_, y_, mb_right,  xevent_.type == ButtonPress); break;
					case Button4: this->_on_mouse_wheel(x_, y_,  120, true); break;
					case Button5: this->_on_mouse_wheel(x_, y_, -120, true); break;
					case Button5+1: this->_on_mouse_button(x_, y_, mb_extra1, xevent_.type == ButtonPress); break;
					case Button5+2: this->_on_mouse_button(x_, y_, mb_extra2, xevent_.type == ButtonPress); break;
					default:        this->_on_mouse_button(x_, y_, mb_other,  xevent_.type == ButtonPress); break;
				}
				break;
			}
			case MotionNotify:
			{
				int  x_  = xevent_.xmotion.x;
				int  y_  = xevent_.xmotion.y;
				this->_on_mouse_move(x_, y_);
				break;
			}
			case KeyPress:
			case KeyRelease:
			{
				bool     down_     = xevent_.type == KeyPress;
				int      state_    = xevent_.xkey.state;
				key      key_      = _::_map_key(XLookupKeysym(&xevent_.xkey, (state_ & Mod2Mask ? 1 : 0)));
				if(key_ == key_other)
					key_ = _::_map_key(XLookupKeysym(&xevent_.xkey, 0));
				this->_on_key(key_, down_);
				break;
			}
		}
	}

  #endif

	friend bool process_event(Event & event) noexcept(false);

	void
	_on_destroy()
	{
		if(on_destroy)
			on_destroy(*this);
	}

	void 
	_on_move(int x_, int y_)
	{
		if(!_modif && (x_ != _x || y_ != _y))
		{
			_x = x_;
			_y = y_;
			if(on_move)
				on_move(*this, _x, _y);
		}
	}

	void 
	_on_size(int width_, int height_)
	{
		if(!_modif && (width_ != _width || height_ != _height))
		{
			_width  = width_;
			_height = height_;
			if(on_size)
				on_size(*this, _width, _height);
		}
	}

	void
	_on_mouse_button(int x_, int y_, mouse_button button_, bool down_)
	{
		if(on_mouse_button)
			on_mouse_button(*this, x_, y_, button_, down_);
	}

	void
	_on_mouse_move(int x_, int y_)
	{
		if(on_mouse_move)
			on_mouse_move(*this, x_, y_);
	}

	void
	_on_mouse_wheel(int x_, int y_, int delta_, bool vertical_)
	{
		if(on_mouse_wheel)
			on_mouse_wheel(*this, x_, y_, delta_, vertical_);
	}

	void
	_on_key(key key_, bool down_)
	{
		if(on_key)
			on_key(*this, key_, down_);
	}

 public:
	ds::callable<void(Window &)>          on_destroy;
	ds::callable<void(Window &,int,int)>  on_move;
	ds::callable<void(Window &,int,int)>  on_size;
	ds::callable<void(Window &,key,bool)> on_key;
	ds::callable<void(Window &,int,int,mouse_button,bool)> on_mouse_button;
	ds::callable<void(Window &,int,int)>                   on_mouse_move;
	ds::callable<void(Window &,int,int,int,bool)>          on_mouse_wheel;

 public:
	~Window() noexcept
	{
		this->destroy();
	}

	Window(Display & display_, ds::string<> title_, int width_, int height_) noexcept(false)
		: _display { &display_ }
		, _title   { ds::move(title_) }
  #ifdef _WIN32
	{
		constexpr char const * CLASS_NAME = "MPW_WINDOW";
		using namespace mw::_win;
		auto hinst = (HINSTANCE_)GetModuleHandleA(nullptr);
		_winhinst  = hinst;
		assert(hinst != NULL);
		static bool _registered = false;
		if(!_registered)
		{
			WNDCLASSEXA_ wcex {};
			wcex.cbSize        = sizeof(WNDCLASSEXA_);
			wcex.hInstance     = hinst;
			wcex.style         = CS_OWNDC_;
			wcex.hbrBackground = (HBRUSH_)(size_t(COLOR_WINDOW_));
			wcex.hCursor       = LoadCursorA(NULL, reinterpret_cast<char const *>(IDC_ARROW_));
			wcex.hIcon         = LoadIconA(NULL,   reinterpret_cast<char const *>(IDI_APPLICATION_));
			wcex.lpfnWndProc   = _win_proc;
			wcex.lpszClassName = CLASS_NAME;
			auto res = RegisterClassExA(&wcex);
			assert(res != NULL);
			_registered = res != NULL;
		}
		_winstyle = WS_OVERLAPPEDWINDOW_;
		RECT_ rc { 0, 0, width_, height_ };
		AdjustWindowRectEx(&rc, _winstyle, 0, 0);
		HWND_ hwnd = CreateWindowExA(0, CLASS_NAME, _title.begin()
			, _winstyle
			, CW_USEDEFAULT_, CW_USEDEFAULT_, (rc.right - rc.left), (rc.bottom - rc.top)
			, NULL, NULL, hinst, nullptr);
		_winwindow = hwnd;
		ds_throw_if(hwnd == NULL, create_window_failure());
		ds_throw_if_alt(hwnd == NULL, assert(hwnd != NULL); return);
		SetWindowLongPtrA(hwnd, GWLP_USERDATA_, LONG_PTR_(this));
		auto * window = reinterpret_cast<Window *>(GetWindowLongPtrA(hwnd, GWLP_USERDATA_));
		ds_throw_if(window != this, create_window_failure());
		ds_throw_if_alt(window != this, assert(window == this); return);
		HDC_ hdc   = GetDC(hwnd);
		_windevctx = hdc;
		{
			PIXELFORMATDESCRIPTOR_ pfd {};
			pfd.nSize        = sizeof(PIXELFORMATDESCRIPTOR_);
			pfd.nVersion     = 1;
			pfd.iPixelType   = PFD_TYPE_RGBA_;
			pfd.dwFlags      = PFD_DRAW_TO_WINDOW_ | PFD_SUPPORT_OPENGL_ | PFD_DOUBLEBUFFER_ | PFD_SWAP_EXCHANGE_;
			pfd.iLayerType   = PFD_MAIN_PLANE_;
			pfd.cColorBits   = 32;
			pfd.cDepthBits   = 24;
			pfd.cStencilBits = 8;
			SetPixelFormat(hdc, ChoosePixelFormat(hdc, &pfd), &pfd);
		}
		HGLRC_ hglrc = wglCreateContext(hdc);
		_winglctx    = hglrc;
		ds_throw_if(_winglctx == NULL, create_context_failure());
		ds_throw_if_alt(_winglctx == NULL, assert(_winglctx != NULL); return);
		wglMakeCurrent(_windevctx, _winglctx);
	}
  #else
	{
		ds_throw_if(display_._xdisplay == nullptr, invalid_display());
		ds_throw_if_alt(display_._xdisplay == nullptr, assert(display_._xdisplay != nullptr); return);
		using namespace mw::_glx;
		int attributes_[]
		{ 
			  GLX_USE_GL_
			, GLX_RGBA_
			, GLX_RED_SIZE_    , 8
			, GLX_GREEN_SIZE_  , 8
			, GLX_BLUE_SIZE_   , 8
			, GLX_ALPHA_SIZE_  , 8
			, GLX_DEPTH_SIZE_  , 24
			, GLX_STENCIL_SIZE_, 8
			, GLX_DOUBLEBUFFER_
			, None 
		};
		auto * xdisplay_  = display_._xdisplay;
		auto * visual_    = glXChooseVisual(xdisplay_, 0, attributes_);
		ds_throw_if(visual_ == nullptr, create_window_failure());
		ds_throw_if_alt(visual_ == nullptr, assert(visual_ != nullptr); return);
		{
			XSetWindowAttributes swa;
			auto root_     = DefaultRootWindow(xdisplay_);
			auto screen    = DefaultScreen(xdisplay_);
			swa.colormap   = XCreateColormap(xdisplay_, root_, visual_->visual, AllocNone);
			swa.event_mask = StructureNotifyMask | VisibilityChangeMask | ClientMessage
			               | ButtonPressMask | ButtonReleaseMask | PointerMotionMask 
			               | KeyPressMask | KeyReleaseMask;
			swa.background_pixel = XWhitePixel(xdisplay_, screen);
			swa.border_pixel     = XBlackPixel(xdisplay_, screen);
			// swa.override_redirect  = True;
			unsigned long swa_mask = CWColormap | CWEventMask | CWBackPixel | CWBorderPixel; 
			// swa_mask |= CWOverrideRedirect;
			_xwindow   = XCreateWindow(xdisplay_, root_, 0, 0, width_, height_, 0, visual_->depth
									, InputOutput, visual_->visual, swa_mask, &swa);
			ds_throw_if(_xwindow == _null_xwindow, create_window_failure());
			ds_throw_if_alt(_xwindow == _null_xwindow, assert(_xwindow != _null_xwindow); return);
			auto window_closed_ = XInternAtom(xdisplay_, "WM_DELETE_WINDOW", True);
			XSetWMProtocols(xdisplay_, _xwindow, &window_closed_, 1);
			XStoreName(xdisplay_, _xwindow, _title.begin());
			XClearWindow(xdisplay_, _xwindow);
		}
		{
			_xcontext = glXCreateContext(xdisplay_, visual_, nullptr, 1);
			ds_throw_if(_xcontext == nullptr, create_context_failure());
			ds_throw_if_alt(_xcontext == nullptr, assert(_xcontext != nullptr));
			glXMakeCurrent(xdisplay_, _xwindow, _xcontext);
		}
		_map.set(_xwindow, this);
	}
  #endif
	
	void 
	destroy() noexcept
	{
	  #ifdef _WIN32
		if(_winwindow != NULL)
		{
			using namespace mw::_win;
			_destroying = true;
			this->_on_destroy();
			if(_winglctx != NULL)
			{
				wglMakeCurrent(NULL, NULL);
				wglDeleteContext(_winglctx);
			}
			if(_windevctx != NULL)
			{
				ReleaseDC(_winwindow, _windevctx);
			}
			DestroyWindow(_winwindow);
			_destroying = false;
			_winwindow = NULL;
		}
	  #else
		auto display_valid_ = _display != nullptr && _display->_xdisplay != nullptr;
		
	  	if(_xwindow != _null_xwindow)
		{
			if(display_valid_)
			{
				_destroying = true;
				this->_on_destroy();
				if(_xcontext != nullptr)
				{
					using namespace mw::_glx;
					glXMakeCurrent(_display->_xdisplay, None, nullptr);
					glXDestroyContext(_display->_xdisplay, _xcontext);
					_xcontext = nullptr;
				}
				XDestroyWindow(_display->_xdisplay, _xwindow);
				_destroying = false;
			}
			_map.remove(_xwindow);
			_xwindow = _null_xwindow;
		}
	  #endif
	}

	// NOTE: xlib implementation is not present.
	bool
	set_style(window_style style_) noexcept(false)
	{
		if(style_ == _style)
			return true;
	  #ifdef _WIN32
		ds_throw_if(_winwindow == NULL, invalid_window());
		ds_throw_if_alt(_winwindow == NULL, assert(_winwindow != NULL); return false);
		using namespace mw::_win;
		DWORD_ winstyle_ = _winstyle;
		switch(style_)
		{
			default:
			case ws_resizable:  winstyle_ = WS_OVERLAPPEDWINDOW_; break;
			case ws_fixed:      winstyle_ = WS_OVERLAPPED_ | WS_CAPTION_ | WS_SYSMENU_ | WS_MINIMIZEBOX_; break;
			case ws_borderless: winstyle_ = 0; break;
		}
		_modif = true;
		if(SetWindowLongA(_winwindow, GWL_STYLE_, LONG_(winstyle_)) != 0)
		{
			_winstyle = winstyle_;
			_style    = style_;
			if(_style == ws_borderless)
			{
				SetWindowPos(_winwindow, NULL, _x, _y, _width, _height, SWP_SHOWWINDOW_);
			}
			else
			{
				RECT_ rc { long(_x), long(_y), long(_width), long(_height) };
				AdjustWindowRectEx(&rc, _winstyle, 0, 0);
				SetWindowPos(_winwindow, NULL, rc.left, rc.top, int(rc.right - (rc.left - _x)), int(rc.bottom - (rc.top - _y)), _win_vis ? SWP_SHOWWINDOW_ : 0);
			}
			_modif = false;
			return true;
		}
		_modif = false;
	  #else
		ds_throw_if(_display == nullptr || _display->_xdisplay == nullptr, invalid_display());
		ds_throw_if_alt(_display == nullptr || _display->_xdisplay == nullptr, assert(_display != nullptr && _display._xdisplay != nullptr); return false);
		ds_throw_if(_xwindow == _null_xwindow, invalid_window());
		ds_throw_if_alt(_xwindow == _null_xwindow, assert(_xwindow != _null_xwindow); return false);
		if(XMapRaised(_display->_xdisplay, _xwindow) != False)
		{
			_raised = true;
			return true;
		}
	  #endif
		return false;
	}

	bool
	show() noexcept(false)
	{
	  #ifdef _WIN32
		ds_throw_if(_winwindow == NULL, invalid_window());
		ds_throw_if_alt(_winwindow == NULL, assert(_winwindow != NULL); return false);
		using namespace mw::_win;
		ShowWindow(_winwindow, SW_NORMAL_);
		_win_vis = true;
		return true;
	  #else
		ds_throw_if(_display == nullptr || _display->_xdisplay == nullptr, invalid_display());
		ds_throw_if_alt(_display == nullptr || _display->_xdisplay == nullptr, assert(_display != nullptr && _display._xdisplay != nullptr); return false);
		ds_throw_if(_xwindow == _null_xwindow, invalid_window());
		ds_throw_if_alt(_xwindow == _null_xwindow, assert(_xwindow != _null_xwindow); return false);
		if(XMapRaised(_display->_xdisplay, _xwindow) != False)
		{
			_raised = true;
			_win_vis = true;
			return true;
		}
	  #endif
		return false;
	}

	bool
	enable_vsync(bool sync = true) noexcept(false)
	{
	  #ifdef _WIN32
		ds_throw_if(_winwindow == NULL, invalid_window());
		ds_throw_if_alt(_winwindow == NULL, assert(_winwindow != NULL); return);
		using namespace mw::_win;
		using wglSwapIntervalEXT_t = BOOL_(__stdcall *)(int);
		static wglSwapIntervalEXT_t wglSwapIntervalEXT = reinterpret_cast<wglSwapIntervalEXT_t>(wglGetProcAddress("wglSwapIntervalEXT"));
		if(wglSwapIntervalEXT != nullptr)
			return wglSwapIntervalEXT(int(sync)) != 0;
	  #else
		ds_throw_if(_display == nullptr || _display->_xdisplay == nullptr, invalid_display());
		ds_throw_if_alt(_display == nullptr || _display->_xdisplay == nullptr, assert(_display != nullptr && _display._xdisplay != nullptr); return false);
		ds_throw_if(_xwindow == _null_xwindow, invalid_window());
		ds_throw_if_alt(_xwindow == _null_xwindow, assert(_xwindow != _null_xwindow); return false);
		using namespace mw::_glx;
		using glxSwapIntervalEXT_t = void(*)(::Display *, GLXDrawable, int);
		static glxSwapIntervalEXT_t glxSwapIntervalEXT = reinterpret_cast<glxSwapIntervalEXT_t>(glXGetProcAddress((unsigned char const *)"glxSwapIntervalEXT"));
		if(glxSwapIntervalEXT != nullptr)
		{
			glxSwapIntervalEXT(_display->_xdisplay, _xwindow, int(sync));
			return true;
		}
	  #endif
		return false;
	}

	void
	swap()
	{
	  #ifdef _WIN32
		ds_throw_if(_winwindow == NULL, invalid_window());
		ds_throw_if_alt(_winwindow == NULL, assert(_winwindow != NULL); return);
		using namespace mw::_win;
		SwapBuffers(_windevctx);
	  #else
		ds_throw_if(_display == nullptr || _display->_xdisplay == nullptr, invalid_display());
		ds_throw_if_alt(_display == nullptr || _display->_xdisplay == nullptr, assert(_display != nullptr && _display._xdisplay != nullptr); return false);
		ds_throw_if(_xwindow == _null_xwindow, invalid_window());
		ds_throw_if_alt(_xwindow == _null_xwindow, assert(_xwindow != _null_xwindow); return false);
		using namespace mw::_glx;
		if(_display != nullptr && _display->_xdisplay != nullptr)
			glXSwapBuffers(_display->_xdisplay, _xwindow);
	  #endif
	}

	bool
	make_current() noexcept
	{
	  #ifdef _WIN32
		using namespace mw::_win;
		if(_winwindow != NULL && _winglctx != NULL)
		{
			if(wglGetCurrentContext() == _winglctx)
				return true;
			return wglMakeCurrent(_windevctx, _winglctx) != 0;
		}
	  #else
		using namespace mw::_glx;
		if(_display != nullptr && _display->_xdisplay != nullptr && _xwindow != _null_xwindow)
		{
			if(glXGetCurrentContext() == _xcontext)
				return true;
			else
				return glXMakeCurrent(_display->_xdisplay, _xwindow, _xcontext) != False;
		}
	  #endif
		return false;
	}

	bool 
	set_position(int x_, int y_) noexcept
	{
	  #ifdef _WIN32
		using namespace mw::_win;
		if(_winwindow != NULL)
		{
			RECT_ rc { long(x_), long(y_), long(_width), long(_height) };
			AdjustWindowRectEx(&rc, _winstyle, 0, 0);
			if(SetWindowPos(_winwindow, NULL, rc.left, rc.top, 0, 0, SWP_NOSIZE_) != 0)
			{
				this->_on_move(x_, y_);
				return true;
			}
		}
	  #else
		if(_display != nullptr && _display->_xdisplay != nullptr && _xwindow != _null_xwindow)
		{
			if(XMoveWindow(_display->_xdisplay, _xwindow, x_, y_) == 0)	
			{
				this->_on_move(x_, y_);
				return true;
			}
		}
	  #endif
		return false;
	}

	bool 
	set_size(int width_, int height_) noexcept
	{
	  #ifdef _WIN32
		using namespace mw::_win;
		if(_winwindow != NULL)
		{
			RECT_ rc { 0, 0, long(width_), long(height_) };
			AdjustWindowRectEx(&rc, _winstyle, 0, 0);
			int w_ = rc.right - rc.left;
			int h_ = rc.bottom - rc.top;
			if(SetWindowPos(_winwindow, NULL, 0, 0, w_, h_, SWP_NOMOVE_) != 0)
			{
				this->_on_size(width_, height_);
				return true;
			}
		}
	  #else
		if(_display != nullptr && _display->_xdisplay != nullptr && _xwindow != _null_xwindow)
		{
			if(XResizeWindow(_display->_xdisplay, _xwindow, width_, height_) == 0)
			{
				this->_on_size(width_, height_);
				return true;
			}
		}
	  #endif
		return false;
	}

	bool
	show_cursor(bool show_ = true) noexcept
	{
	  #ifdef _WIN32
		if(_winwindow != NULL)
		{
			if(_cursor_vis != show_)
			{
				using namespace mw::_win;
				_cursor_vis = show_;
				ShowCursor(show_);
			}
			return true; 
		}
	  #else
		if(_display != nullptr && _display->_xdisplay != nullptr && _xwindow != _null_xwindow)
		{
			if(_cursor_vis != show_)
			{
				auto & xdisplay_ = _display->_xdisplay;
				_cursor_vis = show_;
				if(show_)
					XUndefineCursor(xdisplay_, _xwindow);
				else
				{
					XColor bg {}, fg {};
					char bmp[1][1]     = {{0}};
					Pixmap pix         = XCreatePixmapFromBitmapData(xdisplay_, _xwindow, &bmp[0][0], 1, 1, 0, 1, 1);
					Pixmap pix_mask    = XCreatePixmapFromBitmapData(xdisplay_, _xwindow, &bmp[0][0], 1, 1, 1, 0, 1);
					Cursor null_cursor = XCreatePixmapCursor(xdisplay_, pix, pix_mask, &bg, &fg, 0, 0);
					XDefineCursor(xdisplay_, _xwindow, null_cursor);
					XFreePixmap(xdisplay_, pix);
					XFreePixmap(xdisplay_, pix_mask);
				}
			}
			return true;
		}
	  #endif
		return false;
	}

	bool 
	set_cursor_position(int x_, int y_) noexcept
	{
	  #ifdef _WIN32
		using namespace mw::_win;
		return SetCursorPos(x_, y_) != 0;
	  #else
		if(_display != nullptr && _display->_xdisplay != nullptr && _xwindow != _null_xwindow)
			return XWarpPointer(_display->_xdisplay, None, _xwindow, 0, 0, 0, 0, (x_ - _x), (y_ - _y)) != 0;
	  #endif
		return false;
	}

	bool 
	get_cursor_position(int & x_, int & y_) noexcept
	{
	  #ifdef _WIN32
		using namespace mw::_win;
		POINT_ point;
		if(GetCursorPos(&point) != 0)
		{
			x_ = point.x;
			y_ = point.y;
			return true;
		}
	  #else
		if(_display != nullptr && _display->_xdisplay != nullptr && _xwindow != _null_xwindow)
		{
			::Window root, child;
			int ch_x, ch_y;
			unsigned int mask_;
			return XQueryPointer(_display->_xdisplay, _xwindow, &root, &child, &x_, &y_, &ch_x, &ch_y, &mask_) != 0;
		}
	  #endif
		return false;
	}

	int          x()                 const noexcept { return _x; }
	int          y()                 const noexcept { return _y; }
	int          width()             const noexcept { return _width; }
	int          height()            const noexcept { return _height; }
	bool         is_cursor_visible() const noexcept { return _cursor_vis; }
	window_style style()             const noexcept { return _style; }

  #ifdef _WIN32
	bool operator!() noexcept { return _winwindow == NULL; }
	explicit operator bool()       noexcept { return _winwindow != NULL; }
	explicit operator bool() const noexcept { return _winwindow != NULL; }
  #else
	bool operator!() noexcept { return _xwindow == _null_xwindow; }
	explicit operator bool()       noexcept { return _xwindow != _null_xwindow; }
	explicit operator bool() const noexcept { return _xwindow != _null_xwindow; }
  #endif

};

#ifndef _WIN32
ds::unordered_map<32,::Window,Window *> Window::_map;
#endif

using window = Window;

} // namespace mw


#endif // MPW_WINDOW

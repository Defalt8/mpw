#pragma once
#ifndef MPW_COMMON
#define MPW_COMMON

#include <glfl/core.hpp>

#ifndef _WIN32
#	include <X11/Xlib.h>
#	include <X11/Xutil.h>
#	include <X11/keysymdef.h>
#endif

#include <ds/string>
#include <ds/string_stream>

namespace mw {

static ds::nt_string_stream<> log(1024);
static ds::EndLine endl_error(stderr);
static ds::EndLine endl_warning(stderr);
static ds::EndLine endl(stdout);
static ds::FlushTo flush_error(stderr);
static ds::FlushTo flush_warning(stderr);
static ds::FlushTo flush(stdout);

struct load_failure : public ds::exception
{
	char const *
	what() const noexcept override
	{
		return "glfl::load failure";
	}
};

static bool 
init()
{
	auto glfl_load = glfl::load();
	ds_throw_if(!glfl_load, load_failure());
	ds_throw_alt(assert(glfl_load));
	return glfl_load;
}

struct Event;
class  Display;
class  Window;

static bool next_event(Display & display_, Event & event_, bool await_ = false) noexcept(false);
static bool process_event(Event & event_) noexcept(false);

} // namespace mw

#endif // MPW_COMMON
